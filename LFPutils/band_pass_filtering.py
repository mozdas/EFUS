"""
This file contains the script for bandpass filtering a down sampled evoked LFP data.

    Required Files:
        This script uses down sampled (1000 Hz) evoked LFP data for analysis. It can be generated by checking the option when generating dictionay for the LFP Analysis and then running the LFP Pipeline.

    Input:
        main_path: Path for the data.
        low_cutff, high_cut_off : Cut off frequencies of the bandpass filter.
        order_of_filter : The order of the filter.
    
    Output:
        Creates figures under 'analyzed' folder

    Created on  July , 2018
    Author: Abdulkadir Gokce - Please contact him or Mehmet Ozdas in case of any questions.

"""

import os
import shutil
import pickle
import numpy as np
import math
import matplotlib.pyplot as plt
from utils.filtering import bandpassFilter

#########Parameters for testing
main_path = '//media/yaniklab/05d01d78-2bd6-4a4e-b573-df49ccacb71c/2018_04_13_FUSs1_EphysM1_E-FUS_NBBB68/'
#main_path = '/media/yaniklab/05d01d78-2bd6-4a4e-b573-df49ccacb71c/test_1234567/'
low_cutoff = 30
high_cutoff = 80
order_of_filter = 4
########


directories_to_skip = ['analyzed','analysis_files', 'other', 'log.txt', 'notes.docs', '.DS_Store', '._.DS_Store']
dirs = os.listdir(main_path)

for folder in (folder for folder in dirs if (folder not in directories_to_skip)):
    
    parameters_path = '{0}{1}/paramsDict.p'.format(main_path, folder)
    p = pickle.load(open(parameters_path,'rb')) #Load LFP analysis parameters

    #Preallocate analysis arrays
    filtered_evoked = np.zeros(( p['probes'], p['shanks'], p['nr_of_electrodes_per_group'], int((p['evoked_pre']+p['evoked_post'])*1000) ))
    errors = np.zeros(( p['probes'], p['shanks'], p['nr_of_electrodes_per_group'], int((p['evoked_pre']+p['evoked_post'])*1000) ))

    for probe in range(p['probes']):
        for group in range(p['shanks']):
        
            evoked_data_path = '{0}{1}/probe_{2}_group_{3}/probe_{4}_group_{5}_evoked_down_sampled.pickle'.format(main_path, folder, probe, group, probe, group)
            fid = open(evoked_data_path,'rb')
            evoked_data = pickle.load(fid) #Load down sampled evoked LFP data
            fid.close()
            evoked = evoked_data['evoked']
        
            bandpass_filter = bandpassFilter(rate=1000, high=high_cutoff, low=low_cutoff, order=order_of_filter, axis=2)
            filtered = bandpass_filter(evoked) #Bandpass filterind the data
            filtered_evoked[probe, group] = np.mean(filtered, axis=0) #Mean along the evoked window axis

            std_deviation = np.std(filtered, axis=0)
            errors[probe, group] = std_deviation / math.sqrt(len(filtered)) #Calculate error of means


    time = np.linspace(-p['evoked_pre']*1000, p['evoked_post']*1000, int((p['evoked_pre']+p['evoked_post'])*1000))

    for probe in range(p['probes']):
        for group in range(p['shanks']):

            #Cleaning and/or creating directories
            analyzed_path = '{0}analyzed'.format(main_path)
            analyzed_folder_path = '{0}/{1}'.format(analyzed_path, folder)
            analyzed_group_path = '{0}/probe_{1}_group_{2}'.format(analyzed_folder_path, probe, group)
            save_path = '{0}/bandpass_filtered'.format(analyzed_group_path)
            pdf_path = '{0}/pdf'.format(save_path)
            svg_path = '{0}/svg'.format(save_path)

            if os.path.exists(save_path):
                shutil.rmtree(save_path)

            if not os.path.exists(save_path):
                os.mkdir(save_path)

            if not os.path.exists(pdf_path):
                os.mkdir(pdf_path)

            if not os.path.exists(svg_path):
                os.mkdir(svg_path)


            for trode in range(p['nr_of_electrodes_per_group']):

                fig = plt.figure()
                plt.plot(time, filtered_evoked[probe, group, trode])
                plt.fill_between(time, filtered_evoked[probe, group, trode]-errors[probe, group, trode], filtered_evoked[probe, group, trode]+errors[probe, group, trode], color='red')
                
                plt.ylabel('Voltage (uV)')
                plt.xlabel('Time (ms)')
                plt.ylim(np.min(np.min(filtered_evoked[probe,group], axis=1), axis=0), np.max(np.max(filtered_evoked[probe,group], axis=1), axis=0))
                plt.xlim(time.min(), time.max())
                plt.title('Bandpass Filtered ({0}-{1} Hertz) Evoked LFP Electrode-{2}'.format(low_cutoff, high_cutoff, trode))
                
                plt.savefig('{0}/electrode-{1}.pdf'.format(pdf_path, trode), format='pdf')
                plt.savefig('{0}/electrode-{1}.svg'.format(svg_path, trode), format='svg')
                plt.close()




